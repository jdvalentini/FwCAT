{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","status","table","columns","data","message","optionSelect","bind","assertThisInitialized","parseFile","selection","title","_this2","fetch","then","r","json","keys","list","map","key","Array","Header","Cell","react_default","a","createElement","accessor","console","log","setState","path","_this3","method","headers","content-type","body","JSON","stringify","cmd","cfgFile","className","App_Navigation","onSubmitFile","App_Sidebar","onSelect","es","Component","Navigation","_React$Component","apply","arguments","inherits","createClass","value","_this4","items","item","App_FileInput","React","FileInput","_React$Component2","_this5","enabled","filePath","handleChange","submitFile","ev","target","preventDefault","onSubmit","type","onChange","disabled","Sidebar","_React$Component3","_this6","name","onClick","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a0625f7d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactTable from 'react-table';\nimport 'react-table/react-table.css'\nimport './App.css';\n\nexport default class App extends Component {\n\n  constructor (props) {\n    super(props) \n    this.state = {\n      status: 'waiting',\n      table: {\n        columns: [],\n        data: []\n      },\n      message: 'Waiting for file input...'\n    }\n    this.optionSelect = this.optionSelect.bind(this)\n    this.parseFile = this.parseFile.bind(this)\n  }\n\n  optionSelect(selection, title) {\n    if (this.state.status === 'ready') {\n      fetch('http://localhost:3030/listitems?key=' + selection)\n      .then( r => r.json() )\n      .then( r => {\n        let columns = Object.keys(r.list[0]).map(key => {\n          if (r.list[0][key] instanceof Array) {\n            return { \n              Header: key, \n              Cell: <button>View {key}</button> }\n          }\n          return { Header: key, accessor: key };\n        });\n        console.log(r.list)\n        this.setState({ \n          table: { columns: columns, data: r.list },\n          message: \"Viewing \" + title\n        })\n      })\n    }\n  }\n\n  parseFile(path) {\n    fetch('http://localhost:3030/parse/', {\n        method: 'POST',\n        headers: { 'content-type': 'application/json' },\n        body: JSON.stringify({\n            cmd: 'parseCfg',\n            cfgFile: path\n        })\n    })\n    .then( r => r.json() )\n    .then( (r) => {\n        if (r.status === \"ready\") {\n          this.setState({status: 'ready', message: 'Ready...'})      \n        }\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navigation onSubmitFile={this.parseFile} message={this.state.message} />\n        <div className=\"row\">\n          <Sidebar onSelect={this.optionSelect} />\n          <div className=\"main-pane\">\n              <ReactTable data={this.state.table.data} columns={this.state.table.columns} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport class Navigation extends React.Component {\n\n  render () {\n      let items = ['1', '2', '3']\n      items = items.map( item => <div key={item}>{item}</div> )\n      return (\n          <div className=\"navigation-bar\">\n              <nav>{items}</nav><span>{this.props.message}</span>\n              <FileInput onSubmitFile={(path) => this.props.onSubmitFile(path)}/>\n          </div>\n      )\n  }\n}\n\nexport class FileInput extends React.Component {\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      enabled: false,\n      filePath: '/var/cisco-internet.cfg'\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.submitFile = this.submitFile.bind(this)\n  }\n\n  handleChange(ev) {\n    this.setState({filePath: ev.target.value})\n  }\n\n  submitFile(ev) {\n    ev.preventDefault()\n    this.props.onSubmitFile(this.state.filePath)\n  }\n  render() {\n    return (\n      <div className=\"file-input\">\n        Ruta del archivo: <br />\n        <form onSubmit={this.submitFile}>\n            <input type=\"text\" value={this.state.filePath} onChange={this.handleChange} disabled={ this.state.disabled } />    \n        </form>\n      </div>\n    )\n  }\n}\n\nexport class Sidebar extends React.Component {\n  render() {\n      let items = [\n          {name: 'Objects', value: 'objects'}, \n          {name: 'Objects Groups', value: 'objectgroups'}, \n          {name: 'Routes', value: 'routes'},\n          {name: 'Interfaces', value: 'interfaces'},\n          {name: 'Users', value: 'users'},\n          {name: 'Not Parsed', value: 'notparsed'},\n      ];\n\n      items = items.map(item => {\n        return (\n          <div key={item.value} onClick={() => this.props.onSelect(item.value, item.name)} className=\"side-item\">\n            {item.name}\n          </div>\n        )\n      })\n      return (\n      <div className=\"sidebar\">\n          {items}\n      </div>);\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}